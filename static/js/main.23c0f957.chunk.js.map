{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","onSubmit","edit","useState","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleSubmit","e","preventDefault","id","Math","floor","random","text","handleChange","target","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","TodoList","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","pre","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23c0f957.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef} from \"react\";\r\n\r\nfunction TodoForm({onSubmit, edit}) {\r\n  const [input, setInput] = useState(edit ? edit.value : '');\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n  const handleSubmit = (e)=>{\r\n    e.preventDefault();\r\n    onSubmit({\r\n        id : Math.floor(Math.random()*10000),\r\n        text : input\r\n    });\r\n    setInput('');\r\n  }\r\n  const handleChange = (e)=>{\r\n    setInput(e.target.value);\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n      {edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add a todo'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport TodoList from './TodoList';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id : null,\r\n        value :''\r\n    });\r\n\r\n    const submitUpdate = value =>{\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id : null,\r\n            value:''\r\n        })\r\n    }\r\n    if (edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n          className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n          key={index}\r\n        >\r\n          <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n            {todo.text}\r\n          </div>\r\n          <div className='icons'>\r\n            <RiCloseCircleLine\r\n              onClick={() => removeTodo(todo.id)}\r\n              className='delete-icon'\r\n            />\r\n            <TiEdit\r\n              onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n              className='edit-icon'\r\n            />\r\n          </div>\r\n        </div>\r\n      ));\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState, useEffect} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useLocalStorage('name', []);\r\n\r\n    const addTodo = (todo)=>{\r\n        if (!todo.text || /^\\s*$/.test(todo.text) ){\r\n            return\r\n        }\r\n        const newTodos = [todo,...todos]\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text) ){\r\n            return\r\n        }\r\n        setTodos(pre => pre.map(item => (item.id === todoId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo=> (todo.id!==id));\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n          if (todo.id === id) {\r\n            todo.isComplete = !todo.isComplete;\r\n          }\r\n          return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n      };\r\n\r\n      function useLocalStorage(key, initialValue) {\r\n        // State to store our value\r\n        // Pass initial state function to useState so logic is only executed once\r\n        const [storedValue, setStoredValue] = useState(() => {\r\n          try {\r\n            // Get from local storage by key\r\n            const item = window.localStorage.getItem(key);\r\n            // Parse stored json or if none return initialValue\r\n            return item ? JSON.parse(item) : initialValue;\r\n          } catch (error) {\r\n            // If error also return initialValue\r\n            console.log(error);\r\n            return initialValue;\r\n          }\r\n        });\r\n      \r\n        // Return a wrapped version of useState's setter function that ...\r\n        // ... persists the new value to localStorage.\r\n        const setValue = value => {\r\n          try {\r\n            // Allow value to be a function so we have same API as useState\r\n            const valueToStore =\r\n              value instanceof Function ? value(storedValue) : value;\r\n            // Save state\r\n            setStoredValue(valueToStore);\r\n            // Save to local storage\r\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n          } catch (error) {\r\n            // A more advanced implementation would handle the error case\r\n            console.log(error);\r\n          }\r\n        };\r\n      \r\n        return [storedValue, setValue];\r\n      }\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}